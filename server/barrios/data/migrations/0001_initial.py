# Generated by Django 4.2.7 on 2023-11-05 21:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.IntegerField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=200, unique=True)),
                ('rate_category', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='IssFlightPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datedim', models.DateTimeField()),
                ('port_name', models.CharField(blank=True)),
                ('vehicle_name', models.CharField(blank=True)),
                ('eva_name', models.CharField(blank=True)),
                ('eva_type', models.CharField(blank=True)),
                ('eva_accuracy', models.CharField(blank=True)),
                ('event', models.CharField(blank=True)),
            ],
            options={
                'db_table': 'iss_flight_plans',
            },
        ),
        migrations.CreateModel(
            name='IssFlightPlanCrewNationalityLookup',
            fields=[
                ('nationality', models.CharField(primary_key=True, serialize=False, unique=True)),
                ('is_usos_crew', models.BooleanField()),
                ('is_rsa_crew', models.BooleanField()),
            ],
            options={
                'db_table': 'iss_flight_plan_crew_nationality_lookups',
            },
        ),
        migrations.CreateModel(
            name='RsaConsumablesWaterSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField(unique=True)),
                ('remain_potable_liters', models.FloatField()),
                ('remain_technical_liters', models.FloatField()),
                ('remain_rodnik_liters', models.FloatField()),
            ],
            options={
                'db_table': 'rsa_consumable_water_summary',
            },
        ),
        migrations.CreateModel(
            name='TankCapacityDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tank_category', models.CharField(max_length=200, unique=True)),
                ('tank_capacity', models.FloatField()),
                ('units', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'tank_capacity_definitions',
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=200)),
                ('file_path', models.CharField(max_length=200)),
                ('upload_date', models.DateTimeField(verbose_name='date uploaded')),
            ],
            options={
                'db_table': 'uploads',
            },
        ),
        migrations.CreateModel(
            name='UsRsWeeklyConsumableGasSummery',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('usos_o2_kg', models.FloatField()),
                ('rs_o2_kg', models.FloatField()),
                ('us_n2_kg', models.FloatField()),
                ('rs_n2_hg', models.FloatField()),
                ('adjusted_o2_kg', models.FloatField()),
                ('adjusted_n2_kg', models.FloatField()),
                ('resupply_o2_kg', models.FloatField(blank=True, null=True)),
                ('resupply_n2_kg', models.FloatField(blank=True, null=True)),
                ('resupply_air_kg', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'us_rs_weekly_consumables_gas_summary',
            },
        ),
        migrations.CreateModel(
            name='UsWeeklyConsumableWaterSummary',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('corrected_potable_l', models.FloatField()),
                ('corrected_technical_l', models.FloatField()),
                ('corrected_total_l', models.FloatField()),
                ('resupply_potable_l', models.FloatField(blank=True, null=True)),
                ('resupply_technical_l', models.FloatField(blank=True, null=True)),
                ('corrected_predicted_l', models.FloatField()),
            ],
            options={
                'db_table': 'us_weekly_consumable_water_summary',
            },
        ),
        migrations.CreateModel(
            name='ImsConsumablesCategoryLookup',
            fields=[
                ('category_name', models.CharField()),
                ('category_id', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, primary_key=True, serialize=False, to='data.category')),
                ('module_name', models.CharField(max_length=200, unique=True)),
                ('module_id', models.IntegerField()),
                ('unique_cat_mod_id', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'db_table': 'ims_consumables_category_lookups',
            },
        ),
        migrations.CreateModel(
            name='StoredItemsOnlyInventoryMgmtSystemConsumables',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datedim', models.DateTimeField()),
                ('ims_id', models.IntegerField(null=True)),
                ('id_parent', models.IntegerField(null=True)),
                ('id_path', models.CharField(max_length=200)),
                ('tree_depth', models.IntegerField(null=True)),
                ('tree', models.CharField(max_length=200)),
                ('part_number', models.CharField(max_length=200)),
                ('serial_number', models.IntegerField(null=True)),
                ('location_name', models.CharField(max_length=200)),
                ('original_ip_owner', models.CharField(max_length=200)),
                ('current_ip_owner', models.CharField(max_length=200)),
                ('operational_nomenclature', models.CharField(max_length=200)),
                ('russian_name', models.CharField(max_length=200)),
                ('english_name', models.CharField(max_length=200)),
                ('barcode', models.CharField(max_length=200)),
                ('quantity', models.IntegerField(null=True)),
                ('width', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('diameter', models.FloatField(blank=True, null=True)),
                ('calculated_volume', models.FloatField()),
                ('stwg_ovrrd_vol', models.FloatField(blank=True, null=True)),
                ('children_volume', models.FloatField(blank=True, null=True)),
                ('stwg_ovrrd_chldrn_vol', models.FloatField(blank=True, null=True)),
                ('ovrrd_notes', models.CharField()),
                ('volume_notes', models.CharField()),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('launch', models.CharField(blank=True, null=True)),
                ('type', models.CharField()),
                ('hazard', models.CharField(blank=True, null=True)),
                ('state', models.CharField()),
                ('status', models.CharField()),
                ('is_container', models.BooleanField()),
                ('is_moveable', models.BooleanField()),
                ('system', models.CharField()),
                ('subsystem', models.CharField()),
                ('action_date', models.DateTimeField()),
                ('move_date', models.DateTimeField()),
                ('fill_status', models.CharField(blank=True, null=True)),
                ('category_name', models.CharField()),
                ('categoryID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.category')),
            ],
            options={
                'db_table': 'stored_items_only_inventory_mgmt_system_consumables',
            },
        ),
        migrations.CreateModel(
            name='RatesDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affected_consumable', models.CharField(max_length=200)),
                ('rate', models.FloatField()),
                ('units', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=200)),
                ('efficiency', models.FloatField()),
                ('rate_category', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='data.category', to_field='rate_category')),
            ],
            options={
                'db_table': 'rates_definitions',
            },
        ),
        migrations.CreateModel(
            name='IssFlightPlanCrew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datedim', models.DateTimeField()),
                ('crew_count', models.IntegerField()),
                ('nationality_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.issflightplancrewnationalitylookup')),
            ],
            options={
                'db_table': 'iss_flight_plan_crews',
            },
        ),
        migrations.CreateModel(
            name='InventoryMgmtSystemConsumables',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datedim', models.DateTimeField()),
                ('ims_id', models.IntegerField(null=True)),
                ('id_parent', models.IntegerField(null=True)),
                ('id_path', models.CharField(max_length=200)),
                ('tree_depth', models.IntegerField(null=True)),
                ('tree', models.CharField(max_length=200)),
                ('part_number', models.CharField(max_length=200)),
                ('serial_number', models.IntegerField(null=True)),
                ('location_name', models.CharField(max_length=200)),
                ('original_ip_owner', models.CharField(max_length=200)),
                ('current_ip_owner', models.CharField(max_length=200)),
                ('operational_nomenclature', models.CharField(max_length=200)),
                ('russian_name', models.CharField(max_length=200)),
                ('english_name', models.CharField(max_length=200)),
                ('barcode', models.CharField(max_length=200)),
                ('quantity', models.IntegerField(null=True)),
                ('width', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('diameter', models.FloatField(blank=True, null=True)),
                ('calculated_volume', models.FloatField()),
                ('stwg_ovrrd_vol', models.FloatField(blank=True, null=True)),
                ('children_volume', models.FloatField(blank=True, null=True)),
                ('stwg_ovrrd_chldrn_vol', models.FloatField(blank=True, null=True)),
                ('ovrrd_notes', models.CharField()),
                ('volume_notes', models.CharField()),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('launch', models.CharField(blank=True, null=True)),
                ('type', models.CharField()),
                ('hazard', models.CharField(blank=True, null=True)),
                ('state', models.CharField()),
                ('status', models.CharField()),
                ('is_container', models.BooleanField()),
                ('is_moveable', models.BooleanField()),
                ('system', models.CharField()),
                ('subsystem', models.CharField()),
                ('action_date', models.DateTimeField()),
                ('move_date', models.DateTimeField()),
                ('fill_status', models.CharField(blank=True, null=True)),
                ('category_name', models.CharField()),
                ('categoryID', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='data.category')),
            ],
            options={
                'db_table': 'inventory_mgmt_system_consumables',
            },
        ),
        migrations.CreateModel(
            name='ThresholdLimitsDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threshold_category', models.CharField(max_length=200, unique=True)),
                ('threshold_value', models.FloatField()),
                ('threshold_owner', models.CharField(blank=True, max_length=200)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.imsconsumablescategorylookup')),
            ],
            options={
                'db_table': 'thresholds_limits_definitions',
            },
        ),
    ]
